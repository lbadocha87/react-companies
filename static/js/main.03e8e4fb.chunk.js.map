{"version":3,"sources":["CompaniesList.js","App.js","serviceWorker.js","index.js"],"names":["CompaniesList","getCompanies","axios","get","then","resp","data","getOrders","companiesArray","ordersArray","companiesWithOrders","i","length","currentCompany","ordersAmountSum","j","companyId","id","amount","ordersSum","push","setState","companiesWithData","filteredCompaniesWithData","sortOrders","sortType","swapp","console","log","n","state","x","temp","fileterCompanies","event","filteredCompanies","filter","company","name","toUpperCase","includes","target","value","this","companies","companiesList","map","className","key","type","placeholder","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uSA4HeA,E,kDAtHX,aAAe,IAAD,8BACV,gBAQJC,aAAe,WACX,OAAOC,IAAMC,IAAI,mEACZC,MAAK,SAAAC,GACF,OAAOA,EAAKC,SAZV,EAiBdC,UAAY,SAAAC,GAGRN,IAAMC,IAAI,gEACLC,MAAK,SAAAC,GAIF,IAHA,IAAII,EAAcJ,EAAKC,KACnBI,EAAsB,GAEjBC,EAAI,EAAGA,EAAIH,EAAeI,OAAQD,IAAK,CAK5C,IAJA,IAAIE,EAAiBL,EAAeG,GAChCG,EAAkB,EAGbC,EAAI,EAAGA,EAAIN,EAAYG,OAAQG,IAChCN,EAAYM,GAAGC,YAAcH,EAAeI,KAC5CH,GAAmBL,EAAYM,GAAGG,QAI1CL,EAAeM,UAAYL,EAC3BJ,EAAoBU,KAAKP,GAG7B,EAAKQ,SAAS,CAAEC,kBAAmBZ,EAAqBa,0BAA2Bb,QAxCjF,EA4Cdc,WAAa,SAAAC,GAKT,IAAIC,EAJJC,QAAQC,IAAI,WAKZ,IAAIC,EAAI,EAAKC,MAAMR,kBAAkBV,OAAS,EAC1CmB,EAAI,EAAKD,MAAMR,kBACnB,EAAG,CACCI,GAAQ,EACR,IAAK,IAAIf,EAAI,EAAGA,EAAIkB,EAAGlB,IAEnB,GAAIoB,EAAEpB,GAAGc,GAAYM,EAAEpB,EAAI,GAAGc,GAAY,CACtC,IAAIO,EAAOD,EAAEpB,GACboB,EAAEpB,GAAKoB,EAAEpB,EAAI,GACboB,EAAEpB,EAAI,GAAKqB,EACXN,GAAQ,EAGhBG,UACKH,GAETC,QAAQC,IAAIG,GAEZ,EAAKV,SAAS,CAACC,kBAAmBS,KApExB,EAwEdE,iBAAmB,SAACC,GAEhB,IAAIC,EAAoB,EAAKL,MAAMR,kBAAkBc,QAAO,SAAAC,GACxD,OAAOA,EAAQC,KAAKC,cAAcC,SAASN,EAAMO,OAAOC,MAAMH,kBAGlE,EAAKlB,SAAS,CAACE,0BAA2BY,KA3E1C,EAAKL,MAAQ,CACTR,kBAAmB,GACnBC,0BAA2B,IALrB,E,gEAkFO,IAAD,OAChBoB,KAAK1C,eAAeG,MAAK,SAAAwC,GACrB,EAAKrC,UAAUqC,Q,+BAKb,IAAD,OAGDC,EAAgBF,KAAKb,MAAMP,0BAA0BuB,KAAI,SAAAT,GACzD,OACI,yBAAKU,UAAU,MAAMC,IAAKX,EAAQpB,IAC9B,yBAAK8B,UAAU,QAAQV,EAAQpB,IAC/B,yBAAK8B,UAAU,QAAQV,EAAQC,MAC/B,yBAAKS,UAAU,QAAQV,EAAQlB,eAK3C,OACI,yBAAK4B,UAAU,aACX,0CACA,2BAAOE,KAAK,OAAOC,YAAY,eAAeC,SAAUR,KAAKV,mBAC7D,yBAAKc,UAAU,OACX,wBAAIK,QAAS,kBAAI,EAAK5B,WAAW,QAAjC,MACA,qCACA,wBAAI4B,QAAS,kBAAI,EAAK5B,WAAW,eAAjC,YAEHqB,O,GAlHWQ,aCUbC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.03e8e4fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CompaniesList extends Component {\r\n\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            companiesWithData: [],\r\n            filteredCompaniesWithData: []\r\n        }\r\n    }\r\n\r\n    getCompanies = () => {\r\n        return axios.get('https://my-json-server.typicode.com/lbadocha87/orders/companies')\r\n            .then(resp => {\r\n                return resp.data;\r\n            });\r\n    }\r\n\r\n\r\n    getOrders = companiesArray => {\r\n\r\n        /* Pobierz dane o zamówieniach i przypisz sumę zamówień do każdej firmy */\r\n        axios.get('https://my-json-server.typicode.com/lbadocha87/orders/orders')\r\n            .then(resp => {\r\n                let ordersArray = resp.data;\r\n                let companiesWithOrders = [];\r\n\r\n                for (let i = 0; i < companiesArray.length; i++) {\r\n                    let currentCompany = companiesArray[i];\r\n                    let ordersAmountSum = 0;\r\n                    /* Pętla sumująca */\r\n\r\n                    for (let j = 0; j < ordersArray.length; j++) {\r\n                        if (ordersArray[j].companyId === currentCompany.id) {\r\n                            ordersAmountSum += ordersArray[j].amount;\r\n                        }\r\n                    }\r\n\r\n                    currentCompany.ordersSum = ordersAmountSum;\r\n                    companiesWithOrders.push(currentCompany);\r\n                }\r\n\r\n                this.setState({ companiesWithData: companiesWithOrders, filteredCompaniesWithData: companiesWithOrders});\r\n            });\r\n    }\r\n\r\n    sortOrders = sortType => {\r\n        console.log('sortuje');\r\n        /* Posortuj firmy wg sumy zamówień od najmniejszej do największej */\r\n        /* Do sortowania użyj algorytmu bąbelkowego */\r\n\r\n        let swapp;\r\n        let n = this.state.companiesWithData.length - 1;\r\n        let x = this.state.companiesWithData;\r\n        do {\r\n            swapp = false;\r\n            for (let i = 0; i < n; i++) {\r\n    \r\n                if (x[i][sortType] > x[i + 1][sortType] ) {\r\n                    let temp = x[i];\r\n                    x[i] = x[i + 1];\r\n                    x[i + 1] = temp;\r\n                    swapp = true;\r\n                }\r\n            }\r\n            n--;\r\n        } while (swapp);\r\n        \r\n        console.log(x);\r\n        /* Posortowaną tablicę ustaw w stanie komponentu */\r\n        this.setState({companiesWithData: x})\r\n    }\r\n\r\n\r\n    fileterCompanies = (event) => {\r\n        \r\n        let filteredCompanies = this.state.companiesWithData.filter(company=>{\r\n            return company.name.toUpperCase().includes(event.target.value.toUpperCase());\r\n        });\r\n\r\n        this.setState({filteredCompaniesWithData: filteredCompanies});\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getCompanies().then(companies => {\r\n            this.getOrders(companies);\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        /* Zmapuj tablicę z danymi o firmach, stwórz kolekcję obiektów z danymy i wyswietl je w komponencie comapnies */\r\n\r\n        let companiesList = this.state.filteredCompaniesWithData.map(company => {\r\n            return (\r\n                <div className=\"row\" key={company.id}>\r\n                    <div className=\"cell\">{company.id}</div>\r\n                    <div className=\"cell\">{company.name}</div>\r\n                    <div className=\"cell\">{company.ordersSum}</div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"companies\">\r\n                <h2>Lista firm</h2>\r\n                <input type=\"text\" placeholder=\"Find Company\" onChange={this.fileterCompanies}/>\r\n                <div className=\"row\">\r\n                    <h3 onClick={()=>this.sortOrders('id')}>ID</h3>\r\n                    <h3>Name:</h3>\r\n                    <h3 onClick={()=>this.sortOrders('ordersSum')}>Amount:</h3>\r\n                </div>\r\n                {companiesList}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CompaniesList;","import React from 'react';\nimport './App.css';\n\nimport CompaniesList from './CompaniesList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CompaniesList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}